<template>
  <div class="login-container">
    <!--左侧图片  -->
    <div class="logo">
      <img class="left-img" src="@/assets/login/login.png" alt="left-logo" @load="imgLoad">
    </div>
    <!-- 右侧登录form -->
    <div class="form-container" :style="{width:`calc(100vw - ${img_width}px )`}">
      <el-form ref="loginForm" :model="loginForm" :rules="loginRules" class="login-form"  label-position="left">
        <div class="title-container">
          <img class="ironman-img" src="@/assets/login/IRONMAN.png" alt="ironman">
          <h3 class="title">
            {{ $t('login.title') }}
          </h3>
        </div>
        <!-- 账号 -->
        <el-form-item prop="username">
          <span class="svg-container">
            <svg-icon icon-class="renwu"/>
          </span>
          <el-input
            ref="username"
            v-model="loginForm.username"
            :placeholder="$t('login.username')"
            name="username"
            type="text"
            tabindex="2"
          />
        </el-form-item>
        <!-- 密码 -->
        <el-tooltip v-model="capsTooltip" content="Caps lock is On" placement="right" manual>
          <el-form-item prop="password">
            <span class="svg-container">
              <svg-icon icon-class="mima" />
            </span>
            <el-input
              :key="passwordType"
              ref="password"
              v-model="loginForm.password"
              :type="passwordType"
              :placeholder="$t('login.password')"
              name="password"
              tabindex="2"
              @keyup.native="checkCapslock"
              @blur="capsTooltip = false"
            />

          </el-form-item>
        </el-tooltip>
        <!-- 验证码 -->
        <el-form-item prop="vcode">
          <span class="svg-container">
            <svg-icon icon-class="vcode"/>
          </span>
          <el-input
            ref="vcode"
            v-model="loginForm.vcode"
            placeholder="请输入验证码"
            name="vcode"
            type="text"
            tabindex="2"
          />
          <div class="login-code" >
            <!--验证码组件-->
            <Vcode :changeCode.sync='identifyCode'></Vcode>
          </div>
        </el-form-item>

        <el-button :loading="loading" type="primary" style="width:100%;margin-bottom:30px;marginTop:20px" @click.native.prevent="handleLogin">
          {{ $t('login.logIn') }}
        </el-button>
      </el-form>  
    </div>
  </div>
</template>

<script>
import { validUsername } from '@/utils/validate'
import Vcode from '@/components/Vcode/vcode'
export default {
  name: 'Login',
  components: { Vcode},
  data() {
  
    const validateVcode = (rule, value, callback) => {
      if (value!==this.identifyCode) {
        callback(new Error('验证码错误'))
      } else {
        callback()
      }
    }
    return {
      identifyCode:'',
      loginForm: {
        username: 'admin',
        password: '1',
        vcode:''
      },
      loginRules: {
        username: [{ required: true, trigger: 'blur', message: "用户名不能为空" }],
        password: [{ required: true, trigger: 'blur', message: "密码不能为空" }],
        vcode: [{ required: true, trigger: 'blur', validator:validateVcode }]
        // vcode: [{ required: true, trigger: 'blur', message: "验证码不能为空"  }]
      },
      passwordType: 'password',
      capsTooltip: false,
      loading: false,
      redirect: undefined,
      otherQuery: {},
      img_width:0
    }
  },
  watch: {
    $route: {
      handler: function(route) {
        const query = route.query
        if (query) {
          this.redirect = query.redirect
          this.otherQuery = this.getOtherQuery(query)
        }
      },
      immediate: true
    }
  },
  created() {
    // window.addEventListener('storage', this.afterQRScan)
  },
  mounted() {
    if (this.loginForm.username === '') {
      this.$refs.username.focus()
    } else if (this.loginForm.password === '') {
      this.$refs.password.focus()
    }
    window.onresize=()=>{
      this.imgLoad()
    }
  },
  destroyed() {
    // window.removeEventListener('storage', this.afterQRScan)
  },
  methods: {
    //获取左侧图片的宽度
    imgLoad(){
      let img=document.getElementsByClassName('left-img')[0]
      this.img_width=img.clientWidth
      console.log(this.img_width);
    },
    //大写键盘开启
    checkCapslock(e) {
      const { key } = e
      this.capsTooltip = key && key.length === 1 && (key >= 'A' && key <= 'Z')
    },
    //登录事件
    handleLogin() {
      this.$refs.loginForm.validate(valid => {
        if (valid) {
          this.loading = true
          let params={
            userCode:this.loginForm.username,
            userPassword:this.loginForm.password
          }
          this.$store.dispatch('user/login', params)
            .then(() => {
              console.log("this.redirect",this.redirect);
              // console.log({ path: this.redirect || '/', query: this.otherQuery });
              this.$router.push({ path: this.redirect || '/', query: this.otherQuery })
              this.loading = false
            })
            .catch((e) => {
              console.log(e);
              this.loading = false
            })
        } else {
          console.log('error submit!!')
          return false
        }
      })
    },
    getOtherQuery(query) {
      console.log("query",query);
      return Object.keys(query).reduce((acc, cur) => {
        if (cur !== 'redirect') {
          acc[cur] = query[cur]
        }
        return acc
      }, {})
    }
  }
}
</script>

<style lang="scss">
/* reset element-ui css */
.login-container {
  
  .el-input {
    display: flex;
    height: 47px;
    width: 100%;
    justify-content: center;
    align-items: center;
    input {
      border: 0px;
      border-radius: 0px;
      color: #283443;
      height: 47px;
      font-size: 18px;
    }
  }

  .el-form-item {
    border-bottom: 1px solid #283443;
    color: #454545;
    margin-bottom: 30px;
  }
  .el-form-item__content{
    display: flex;
    line-height: 0;
  }
  .el-form-item__error{
    font-size: 16px;
  }
}
</style>

<style lang="scss" scoped>
$dark_gray:#4C4B4B;
$light_gray:#eee;

.login-container {
  height: 100vh;
  width: 100vw;
  background-color:#fff;
  overflow: hidden;
  display: flex;
  .logo{
    height: 100%;
    .left-img{
      height: 100%;
      width: auto;
    }
  }
  .form-container{
    min-width: 670px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding-top: 100px;
    .login-form {
      width: 60%;
      height: 80%;
    }
  }
  

  .tips {
    font-size: 16px;
    color: #fff;
    margin-bottom: 10px;

    span {
      &:first-of-type {
        margin-right: 16px;
      }
    }
  }

  .svg-container {

    color: $dark_gray;
    width: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .svg-icon{
    width: 20px;
    height: 20px;
  }

  .title-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    .ironman-img{
      width: 150px;
      margin-bottom: 20px;
    }
    .title {
      font-size: 30px;
      color: $dark_gray;
      font-weight: bold;
      font-family: 'STSong';
      margin-bottom: 30px;
    }
  }

  .show-pwd {
    position: absolute;
    right: 10px;
    top: 7px;
    font-size: 16px;
    color: $dark_gray;
    cursor: pointer;
    user-select: none;
  }

  .thirdparty-button {
    position: absolute;
    right: 0;
    bottom: 6px;
  }

  @media only screen and (max-width: 470px) {
    .thirdparty-button {
      display: none;
    }
  }
}
</style>
